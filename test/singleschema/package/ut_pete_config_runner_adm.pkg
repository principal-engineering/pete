CREATE OR REPLACE PACKAGE ut_pete_config_runner_api AS

    description pete_core.typ_description := 'Pete Configuration Runner API tests';

    PROCEDURE before_each;

    PROCEDURE set_block_ins(d VARCHAR2 := 'Insert PLSQL Block works');
    PROCEDURE set_block_upd(d VARCHAR2 := 'Update PLSQL Block works');
    PROCEDURE set_block_upd_fails(d VARCHAR2 := 'Update of PLSQL Block with wrong id fails');
    PROCEDURE del_block(d VARCHAR2 := 'Delete PLSQL Block works');
    PROCEDURE del_block_fails(d VARCHAR2 := 'Delete of PLSQL Block with wrong id fails');

    PROCEDURE set_input_argument_ins(d VARCHAR2 := 'Insert Input Argument works');
    PROCEDURE set_input_argument_upd(d VARCHAR2 := 'Update Input Argument works');
    PROCEDURE set_input_argument_upd_fails(d VARCHAR2 := 'Update of Input Argument with wrong id fails');
    PROCEDURE del_input_argument(d VARCHAR2 := 'Delete Input Argument works');
    PROCEDURE del_input_argument_fails(d VARCHAR2 := 'Delete of Input Argument with wrong id fails');

    PROCEDURE set_expected_result_ins(d VARCHAR2 := 'Insert Expected Result works');
    PROCEDURE set_expected_result_upd(d VARCHAR2 := 'Update Expected Result works');
    PROCEDURE set_expected_result_upd_fails(d VARCHAR2 := 'Update of Expected Result with wrong id fails');
    PROCEDURE del_expected_result(d VARCHAR2 := 'Delete Expected Result works');
    PROCEDURE del_expected_result_fails(d VARCHAR2 := 'Delete of Expected Result with wrong id fails');

    PROCEDURE set_block_in_case_with_ids(d VARCHAR2 := 'Insert PLSQL Block in Test Case with subobject ids works');
    PROCEDURE set_block_in_case_with_objs(d VARCHAR2 := 'Insert PLSQL Block in Test Case with subobjects works');

    PROCEDURE set_test_case_with_ids(d VARCHAR2 := 'Insert Test Case with subobject ids works');
    PROCEDURE set_test_case_with_objs(d VARCHAR2 := 'Insert Test Case with subobjects works');

    PROCEDURE set_test_suite_with_ids(d VARCHAR2 := 'Insert Test Suite with subobject ids works');

    PROCEDURE move_block_to_first(d VARCHAR2 := 'Move PLSQL Block to first position in Test Case');
    PROCEDURE move_block_to_last(d VARCHAR2 := 'Move PLSQL Block to last position in Test Case');
    PROCEDURE move_block_up(d VARCHAR2 := 'Move PLSQL Block one position up in Test Case');
    PROCEDURE move_block_down(d VARCHAR2 := 'Move PLSQL Block one position down in Test Case');

    PROCEDURE after_each;

END;
/
CREATE OR REPLACE PACKAGE BODY ut_pete_config_runner_api AS

    -- NoFormat Start
    g_passthrough_anonymous_block VARCHAR2(32767) 
    := 'DECLARE' || chr(10) 
    || '    l_xml_in xmltype := :1;' || chr(10)
    || 'BEGIN' || chr(10)
    || '    :2 := l_xml_in;' || chr(10)
    || 'END;';
    -- NoFormat End

    g_plsql_block_template     petet_plsql_block;
    g_input_argument_template  petet_input_argument;
    g_expected_result_template petet_expected_result;
    g_test_case_template       petet_test_case;

    --------------------------------------------------------------------------------
    PROCEDURE before_each IS
    BEGIN
        g_plsql_block_template := petet_plsql_block(NAME            => 'some name',
                                                    anonymous_block => g_passthrough_anonymous_block);
        --
        g_input_argument_template := petet_input_argument(NAME => 'some name');
        --
        g_expected_result_template := petet_expected_result(NAME => 'some name');
        --
        g_test_case_template := petet_test_case(NAME => 'some name');
    END;

    --------------------------------------------------------------------------------
    FUNCTION hlp_create_test_case(a_prefix_in IN VARCHAR2) RETURN petet_test_case IS
    BEGIN
        --
        --create plsql block
        g_plsql_block_template.name := a_prefix_in || 'plsql_block';
        pete_configuration_runner_adm.set_plsql_block(a_plsql_block_io => g_plsql_block_template);
        --
        --create test case
        g_test_case_template.name                 := a_prefix_in || 'test_case';
        g_test_case_template.plsql_blocks_in_case := petet_plsql_blocks_in_case(petet_plsql_block_in_case(plsql_block => g_plsql_block_template),
                                                                                petet_plsql_block_in_case(plsql_block => g_plsql_block_template),
                                                                                petet_plsql_block_in_case(plsql_block => g_plsql_block_template));
        pete_configuration_runner_adm.set_test_case(a_test_case_io => g_test_case_template);
        --
        RETURN g_test_case_template;
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_block_ins(d VARCHAR2) IS
        l_count INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_plsql_block_template.name := 'set_block_ins';
        --test
        pete_configuration_runner_adm.set_plsql_block(a_plsql_block_io => g_plsql_block_template);
        --assert
        SELECT COUNT(*)
          INTO l_count
          FROM pete_plsql_block
         WHERE NAME = 'set_block_ins';
        --
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_count,
                       a_comment_in  => 'PLSQL Block has been inserted');
        pete_assert.is_not_null(a_value_in   => g_plsql_block_template.id,
                                a_comment_in => 'Id is set after insert');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_block_upd(d VARCHAR2) IS
        l_count INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_plsql_block_template.name := 'set_block_upd_before';
        pete_configuration_runner_adm.set_plsql_block(a_plsql_block_io => g_plsql_block_template);
        g_plsql_block_template.name := 'set_block_upd_after';
        --test
        pete_configuration_runner_adm.set_plsql_block(a_plsql_block_io => g_plsql_block_template);
        --assert
        SELECT COUNT(*)
          INTO l_count
          FROM pete_plsql_block
         WHERE NAME = 'set_block_upd_after'
           AND id = g_plsql_block_template.id;
        --
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_count,
                       a_comment_in  => 'PLSQL Block has been updated');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_block_upd_fails(d VARCHAR2) IS
        l_thrown  BOOLEAN := FALSE;
        l_sqlcode PLS_INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_plsql_block_template.name := 'set_block_upd_fails';
        g_plsql_block_template.id   := -1; --should not exists as only ids from sequence should be in table
        --test
        BEGIN
            pete_configuration_runner_adm.set_plsql_block(a_plsql_block_io => g_plsql_block_template);
            l_thrown := FALSE;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown  := TRUE;
                l_sqlcode := SQLCODE;
        END;
        --assert
        IF NOT l_thrown
        THEN
            raise_application_error(-20000,
                                    'pete_configuration_runner_adm.SET_PLSQL_BLOCK should have thrown.');
        END IF;
        pete_assert.eq(a_expected_in => pete_exception.gc_RECORD_NOT_FOUND,
                       a_actual_in   => l_sqlcode,
                       a_comment_in  => 'PETE_EXCEPTION.GE_RECORD_NOT_FOUND should have been thrown.');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE del_block(d VARCHAR2) IS
        l_count INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_plsql_block_template.name := 'del_block';
        pete_configuration_runner_adm.set_plsql_block(a_plsql_block_io => g_plsql_block_template);
        --test
        pete_configuration_runner_adm.del_plsql_block(a_id_in => g_plsql_block_template.id);
        --assert
        SELECT COUNT(*)
          INTO l_count
          FROM pete_plsql_block
         WHERE NAME = 'del_block'
           AND id = g_plsql_block_template.id;
        --
        pete_assert.eq(a_expected_in => 0,
                       a_actual_in   => l_count,
                       a_comment_in  => 'PLSQL Block has been deleted');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE del_block_fails(d VARCHAR2) IS
        l_thrown  BOOLEAN := FALSE;
        l_sqlcode PLS_INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_plsql_block_template.name := 'del_block_fails';
        g_plsql_block_template.id   := -1; --should not exists as only ids from sequence should be in table
        --test
        BEGIN
            pete_configuration_runner_adm.del_plsql_block(a_id_in => g_plsql_block_template.id);
            l_thrown := FALSE;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown  := TRUE;
                l_sqlcode := SQLCODE;
        END;
        --assert
        IF NOT l_thrown
        THEN
            raise_application_error(-20000,
                                    'pete_configuration_runner_adm.DEL_PLSQL_BLOCK should have thrown.');
        END IF;
        pete_assert.eq(a_expected_in => pete_exception.gc_RECORD_NOT_FOUND,
                       a_actual_in   => l_sqlcode,
                       a_comment_in  => 'PETE_EXCEPTION.GE_RECORD_NOT_FOUND should have been thrown.');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_input_argument_ins(d VARCHAR2) IS
        l_count INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_input_argument_template.name := 'set_input_argument_ins';
        --test
        pete_configuration_runner_adm.set_input_argument(a_input_argument_io => g_input_argument_template);
        --assert
        SELECT COUNT(*)
          INTO l_count
          FROM pete_input_argument
         WHERE NAME = 'set_input_argument_ins';
        --
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_count,
                       a_comment_in  => 'Input Argument has been inserted');
        pete_assert.is_not_null(a_value_in   => g_input_argument_template.id,
                                a_comment_in => 'Id is set after insert');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_input_argument_upd(d VARCHAR2) IS
        l_count INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_input_argument_template.name := 'set_input_argument_upd';
        pete_configuration_runner_adm.set_input_argument(a_input_argument_io => g_input_argument_template);
        --test
        pete_configuration_runner_adm.set_input_argument(a_input_argument_io => g_input_argument_template);
        --assert
        SELECT COUNT(*)
          INTO l_count
          FROM pete_input_argument
         WHERE NAME = 'set_input_argument_upd'
           AND id = g_input_argument_template.id;
        --
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_count,
                       a_comment_in  => 'Input Argument has been updated');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_input_argument_upd_fails(d VARCHAR2) IS
        l_thrown  BOOLEAN := FALSE;
        l_sqlcode PLS_INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_input_argument_template.name := 'set_input_argument_upd_fails';
        g_input_argument_template.id   := -1; --should not exists as only ids from sequence should be in table
        --test
        BEGIN
            pete_configuration_runner_adm.set_input_argument(a_input_argument_io => g_input_argument_template);
            l_thrown := FALSE;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown  := TRUE;
                l_sqlcode := SQLCODE;
        END;
        --assert
        IF NOT l_thrown
        THEN
            raise_application_error(-20000,
                                    'pete_configuration_runner_adm.SET_INPUT_ARGUMENT should have thrown.');
        END IF;
        pete_assert.eq(a_expected_in => pete_exception.gc_RECORD_NOT_FOUND,
                       a_actual_in   => l_sqlcode,
                       a_comment_in  => 'PETE_EXCEPTION.GE_RECORD_NOT_FOUND should have been thrown.');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE del_input_argument(d VARCHAR2) IS
        l_count INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_input_argument_template.name := 'del_input_argument';
        pete_configuration_runner_adm.set_input_argument(a_input_argument_io => g_input_argument_template);
        --test
        pete_configuration_runner_adm.del_input_argument(a_id_in => g_input_argument_template.id);
        --assert
        SELECT COUNT(*)
          INTO l_count
          FROM pete_input_argument
         WHERE NAME = 'del_input_argument'
           AND id = g_input_argument_template.id;
        --
        pete_assert.eq(a_expected_in => 0,
                       a_actual_in   => l_count,
                       a_comment_in  => 'Input Argument has been deleted');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE del_input_argument_fails(d VARCHAR2) IS
        l_thrown  BOOLEAN := FALSE;
        l_sqlcode PLS_INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_input_argument_template.name := 'del_input_argument_fails';
        g_input_argument_template.id   := -1; --should not exists as only ids from sequence should be in table
        --test
        BEGIN
            pete_configuration_runner_adm.del_input_argument(a_id_in => g_input_argument_template.id);
            l_thrown := FALSE;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown  := TRUE;
                l_sqlcode := SQLCODE;
        END;
        --assert
        IF NOT l_thrown
        THEN
            raise_application_error(-20000,
                                    'pete_configuration_runner_adm.DEL_INPUT_ARGUMENT should have thrown.');
        END IF;
        pete_assert.eq(a_expected_in => pete_exception.gc_RECORD_NOT_FOUND,
                       a_actual_in   => l_sqlcode,
                       a_comment_in  => 'PETE_EXCEPTION.GE_RECORD_NOT_FOUND should have been thrown.');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_expected_result_ins(d VARCHAR2) IS
        l_count INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_expected_result_template.name := 'set_expected_result_ins';
        --test
        pete_configuration_runner_adm.set_expected_result(a_expected_result_io => g_expected_result_template);
        --assert
        SELECT COUNT(*)
          INTO l_count
          FROM pete_expected_result
         WHERE NAME = 'set_expected_result_ins';
        --
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_count,
                       a_comment_in  => 'Expected Result has been inserted');
        pete_assert.is_not_null(a_value_in   => g_expected_result_template.id,
                                a_comment_in => 'Id is set after insert');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_expected_result_upd(d VARCHAR2) IS
        l_count INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_expected_result_template.name := 'set_expected_result_upd_before';
        pete_configuration_runner_adm.set_expected_result(a_expected_result_io => g_expected_result_template);
        g_expected_result_template.name := 'set_expected_result_upd_after';
        --test
        pete_configuration_runner_adm.set_expected_result(a_expected_result_io => g_expected_result_template);
        --assert
        SELECT COUNT(*)
          INTO l_count
          FROM pete_expected_result
         WHERE NAME = 'set_expected_result_upd_after'
           AND id = g_expected_result_template.id;
        --
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_count,
                       a_comment_in  => 'Expected Result has been updated');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_expected_result_upd_fails(d VARCHAR2) IS
        l_thrown  BOOLEAN := FALSE;
        l_sqlcode PLS_INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_expected_result_template.name := 'set_expected_result_upd_fails';
        g_expected_result_template.id   := -1; --should not exists as only ids from sequence should be in table
        --test
        BEGIN
            pete_configuration_runner_adm.set_expected_result(a_expected_result_io => g_expected_result_template);
            l_thrown := FALSE;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown  := TRUE;
                l_sqlcode := SQLCODE;
        END;
        --assert
        IF NOT l_thrown
        THEN
            raise_application_error(-20000,
                                    'pete_configuration_runner_adm.SET_EXPECTED_RESULT should have thrown.');
        END IF;
        pete_assert.eq(a_expected_in => pete_exception.gc_RECORD_NOT_FOUND,
                       a_actual_in   => l_sqlcode,
                       a_comment_in  => 'PETE_EXCEPTION.GE_RECORD_NOT_FOUND should have been thrown.');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE del_expected_result(d VARCHAR2) IS
        l_count INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_expected_result_template.name := 'del_expected_result';
        pete_configuration_runner_adm.set_expected_result(a_expected_result_io => g_expected_result_template);
        --test
        pete_configuration_runner_adm.del_expected_result(a_id_in => g_expected_result_template.id);
        --assert
        SELECT COUNT(*)
          INTO l_count
          FROM pete_expected_result
         WHERE NAME = 'del_expected_result'
           AND id = g_expected_result_template.id;
        --
        pete_assert.eq(a_expected_in => 0,
                       a_actual_in   => l_count,
                       a_comment_in  => 'Expected Result has been deleted');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE del_expected_result_fails(d VARCHAR2) IS
        l_thrown  BOOLEAN := FALSE;
        l_sqlcode PLS_INTEGER;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_expected_result_template.name := 'del_expected_result_fails';
        g_expected_result_template.id   := -1; --should not exists as only ids from sequence should be in table
        --test
        BEGIN
            pete_configuration_runner_adm.del_expected_result(a_id_in => g_expected_result_template.id);
            l_thrown := FALSE;
        EXCEPTION
            WHEN OTHERS THEN
                l_thrown  := TRUE;
                l_sqlcode := SQLCODE;
        END;
        --assert
        IF NOT l_thrown
        THEN
            raise_application_error(-20000,
                                    'pete_configuration_runner_adm.DEL_EXPECTED_RESULT should have thrown.');
        END IF;
        pete_assert.eq(a_expected_in => pete_exception.gc_RECORD_NOT_FOUND,
                       a_actual_in   => l_sqlcode,
                       a_comment_in  => 'PETE_EXCEPTION.GE_RECORD_NOT_FOUND should have been thrown.');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_block_in_case_with_ids(d VARCHAR2) IS
        l_name varchar2(255) := 'set_block_in_case_with_ids';
        l_plsql_block_in_case petet_plsql_block_in_case;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_plsql_block_template.name := l_name;
        pete_configuration_runner_adm.set_plsql_block(a_plsql_block_io => g_plsql_block_template);
        g_input_argument_template.name := l_name;
        pete_configuration_runner_adm.set_input_argument(a_input_argument_io => g_input_argument_template);
        g_expected_result_template.name := l_name;
        pete_configuration_runner_adm.set_expected_result(a_expected_result_io => g_expected_result_template);
        g_test_case_template.name := l_name;
        pete_configuration_runner_adm.set_test_case(a_test_case_io => g_test_case_template);
        --
        l_plsql_block_in_case := petet_plsql_block_in_case(
            test_case_id       => g_test_case_template.id,
            plsql_block_id     => g_plsql_block_template.id,
            input_argument_id  => g_input_argument_template.id,
            expected_result_id => g_expected_result_template.id,
            position           => 1
        );
        --test
        pete_configuration_runner_adm.set_plsql_block_in_case(a_plsql_block_in_case_io => l_plsql_block_in_case);
        --TODO: Asserts
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_block_in_case_with_objs(d VARCHAR2) IS
        l_name varchar2(255) := 'set_block_in_case_with_objs';
        l_plsql_block_in_case petet_plsql_block_in_case;
        l_db_plsql_block_in_case petet_plsql_block_in_case;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        g_plsql_block_template.name     := l_name;
        g_input_argument_template.name  := l_name;
        g_expected_result_template.name := l_name;
        --create test case
        g_test_case_template.name := l_name;
        pete_configuration_runner_adm.set_test_case(a_test_case_io => g_test_case_template);
        --
        l_plsql_block_in_case := petet_plsql_block_in_case(
            test_case_id    => g_test_case_template.id,
            plsql_block     => g_plsql_block_template,
            input_argument  => g_input_argument_template,
            expected_result => g_expected_result_template,
            position        => 1
        );
        --test
        pete_configuration_runner_adm.set_plsql_block_in_case(a_plsql_block_in_case_io => l_plsql_block_in_case);
        --TODO: Asserts
        l_db_plsql_block_in_case := pete_configuration_runner_adm.get_plsql_block_in_case(a_id_in => l_plsql_block_in_case.id);
    
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_test_case_with_ids(d VARCHAR2) IS
        l_name         VARCHAR2(32) := 'set_test_case_with_ids';
        l_block        petet_plsql_block := petet_plsql_block(NAME            => l_name,
                                                              anonymous_block => g_passthrough_anonymous_block);
        l_test_case    petet_test_case;
        l_db_test_case petet_test_case;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        pete_configuration_runner_adm.set_plsql_block(a_plsql_block_io => l_block);
        -- NoFormat Start
        l_test_case := 
            petet_test_case(
                NAME                 => l_name,
                plsql_blocks_in_case => petet_plsql_blocks_in_case(
                    petet_plsql_block_in_case(plsql_block_id => l_block.id),
                    petet_plsql_block_in_case(plsql_block_id => l_block.id),
                    petet_plsql_block_in_case(plsql_block_id => l_block.id)
                )
            );
        -- NoFormat End
        --test
        pete_configuration_runner_adm.set_test_case(a_test_case_io => l_test_case);
        --assert
        l_db_test_case := pete_configuration_runner_adm.get_test_case(a_id_in                 => l_test_case.id,
                                                                      a_cascade_subobjects_in => pete_core.g_YES);
        --
        pete_assert.eq(l_test_case.name, l_db_test_case.name);
        pete_assert.eq(l_test_case.plsql_blocks_in_case.count,
                       l_db_test_case.plsql_blocks_in_case.count);
        FOR block_idx IN 1 .. l_test_case.plsql_blocks_in_case.count
        LOOP
            pete_assert.eq(l_test_case.plsql_blocks_in_case   (block_idx)
                           .plsql_block_id,
                           l_db_test_case.plsql_blocks_in_case(block_idx)
                           .plsql_block_id);
        END LOOP;
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_test_case_with_objs(d VARCHAR2) IS
        l_name         VARCHAR2(32) := 'set_test_case_with_objs';
        l_block        petet_plsql_block := petet_plsql_block(NAME            => l_name,
                                                              anonymous_block => g_passthrough_anonymous_block);
        l_test_case    petet_test_case;
        l_db_test_case petet_test_case;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        pete_configuration_runner_adm.set_plsql_block(a_plsql_block_io => l_block);
        -- NoFormat Start
        l_test_case :=
            petet_test_case(
                NAME                 => l_name,
                plsql_blocks_in_case => petet_plsql_blocks_in_case(
                    petet_plsql_block_in_case(plsql_block => l_block),
                    petet_plsql_block_in_case(plsql_block => l_block),
                    petet_plsql_block_in_case(plsql_block => l_block)
                )
            );
        -- NoFormat End
        --test
        pete_configuration_runner_adm.set_test_case(a_test_case_io => l_test_case);
        --assert
        l_db_test_case := pete_configuration_runner_adm.get_test_case(a_id_in                 => l_test_case.id,
                                                                      a_cascade_subobjects_in => pete_core.g_YES);
        --
        pete_assert.eq(l_test_case.name, l_db_test_case.name);
        pete_assert.eq(l_test_case.plsql_blocks_in_case.count,
                       l_db_test_case.plsql_blocks_in_case.count);
        FOR block_idx IN 1 .. l_test_case.plsql_blocks_in_case.count
        LOOP
            pete_assert.eq(l_test_case.plsql_blocks_in_case   (block_idx)
                           .plsql_block_id,
                           l_db_test_case.plsql_blocks_in_case(block_idx)
                           .plsql_block_id);
        END LOOP;
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE set_test_suite_with_ids(d VARCHAR2 := 'Insert Test Suite with subobject ids works') IS
        l_name          VARCHAR2(32) := 'set_test_case_in_suite_w_ids';
        l_test_case     petet_test_case;
        l_test_suite    petet_test_suite;
        l_db_test_suite petet_test_suite;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        --create test case and save to table
        l_test_case := hlp_create_test_case(a_prefix_in => l_name);
        --create test suite object with test case referenced by id
        l_test_suite := petet_test_suite(NAME                => l_name,
                                         test_cases_in_suite => petet_test_cases_in_suite(petet_test_case_in_suite(test_case_id => l_test_case.id)));
        --test
        pete_configuration_runner_adm.set_test_suite(a_test_suite_io => l_test_suite);
        --assert
        l_db_test_suite := pete_configuration_runner_adm.get_test_suite(a_id_in => l_test_suite.id);
    END;

    --------------------------------------------------------------------------------
    PROCEDURE move_block_to_first(d VARCHAR2) IS
        l_test_case           petet_test_case;
        l_block_id_moved      pete_plsql_block_in_case.id%TYPE;
        l_plsql_block_in_case petet_plsql_block_in_case;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        l_test_case      := hlp_create_test_case('move_block_to_first');
        l_block_id_moved := l_test_case.plsql_blocks_in_case(3).id;
        --test
        pete_configuration_runner_adm.move_plsql_block_in_case(a_id_in              => l_block_id_moved,
                                                               a_test_case_id_in    => l_test_case.id,
                                                               a_position_target_in => pete_core.g_ORDER_FIRST);
        --assert
        l_plsql_block_in_case := pete_configuration_runner_adm.get_plsql_block_in_case(a_id_in => l_block_id_moved);
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_plsql_block_in_case.position,
                       a_comment_in  => 'Block in Case is first');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE move_block_to_last(d VARCHAR2) IS
        l_test_case           petet_test_case;
        l_block_id_moved      pete_plsql_block_in_case.id%TYPE;
        l_plsql_block_in_case petet_plsql_block_in_case;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        l_test_case      := hlp_create_test_case('move_block_to_last');
        l_block_id_moved := l_test_case.plsql_blocks_in_case(1).id;
        --test
        pete_configuration_runner_adm.move_plsql_block_in_case(a_id_in              => l_block_id_moved,
                                                               a_test_case_id_in    => l_test_case.id,
                                                               a_position_target_in => pete_core.g_ORDER_LAST);
        --assert
        l_plsql_block_in_case := pete_configuration_runner_adm.get_plsql_block_in_case(a_id_in => l_block_id_moved);
        pete_assert.eq(a_expected_in => l_test_case.plsql_blocks_in_case.count,
                       a_actual_in   => l_plsql_block_in_case.position,
                       a_comment_in  => 'Block in Case is last');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE move_block_up(d VARCHAR2) IS
        l_test_case           petet_test_case;
        l_block_id_moved      pete_plsql_block_in_case.id%TYPE;
        l_plsql_block_in_case petet_plsql_block_in_case;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        l_test_case      := hlp_create_test_case('move_block_up');
        l_block_id_moved := l_test_case.plsql_blocks_in_case(1).id;
        --test
        pete_configuration_runner_adm.move_plsql_block_in_case(a_id_in              => l_block_id_moved,
                                                               a_test_case_id_in    => l_test_case.id,
                                                               a_position_offset_in => 1);
        --assert
        l_plsql_block_in_case := pete_configuration_runner_adm.get_plsql_block_in_case(a_id_in => l_block_id_moved);
        pete_assert.eq(a_expected_in => 2,
                       a_actual_in   => l_plsql_block_in_case.position,
                       a_comment_in  => 'Block in Case is second');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE move_block_down(d VARCHAR2) IS
        l_test_case           petet_test_case;
        l_block_id_moved      pete_plsql_block_in_case.id%TYPE;
        l_plsql_block_in_case petet_plsql_block_in_case;
    BEGIN
        --log
        pete.set_method_description(d);
        --prepare
        l_test_case      := hlp_create_test_case('move_block_down');
        l_block_id_moved := l_test_case.plsql_blocks_in_case(3).id;
        --test
        pete_configuration_runner_adm.move_plsql_block_in_case(a_id_in              => l_block_id_moved,
                                                               a_test_case_id_in    => l_test_case.id,
                                                               a_position_offset_in => -1);
        --assert
        l_plsql_block_in_case := pete_configuration_runner_adm.get_plsql_block_in_case(a_id_in => l_block_id_moved);
        pete_assert.eq(a_expected_in => 2,
                       a_actual_in   => l_plsql_block_in_case.position,
                       a_comment_in  => 'Block in Case is second');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE after_each IS
    BEGIN
        ROLLBACK;
    END;

END;
/
