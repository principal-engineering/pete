create or replace package ut_pete as

    description pete_types.typ_description := 'Pete package tests';

    procedure log_call(a_value_in in varchar2);

    -- run_test_package group
    procedure run_test_package_empty(d varchar2 := 'call with null package name should throw');

    --dummy method to test
    procedure dummy_method;

    procedure run_one_method_only(d varchar2 := 'call of one method should pass OK');

end ut_pete;
/
create or replace package body ut_pete as

    g_call_log    varchar2(30);
    gc_CALLED     varchar2(30) := 'CALLED';
    gc_NOT_CALLED varchar2(30) := 'NOT CALLED';

    --------------------------------------------------------------------------------
    procedure log_call(a_value_in in varchar2) is
    begin
        g_call_log := a_value_in;
    end;

    --------------------------------------------------------------------------------
    procedure run_test_package_empty(d varchar2) is
        l_failed boolean;
    begin
        --log
        pete.set_method_description(d);
        --assert
        begin
            pete.run_test_package(package_name => null, parent_run_log_id => pete_core.get_last_run_log_id);
            l_failed := false;
        exception
            when others then
                l_failed := true;
        end;
        --
        pete_assert.this(l_failed);
        --
    end;

    --------------------------------------------------------------------------------
    procedure dummy_method is
    begin
        log_call('CALLED');
    end;

    --------------------------------------------------------------------------------
    procedure run_one_method_only(d varchar2) is
    begin
        --log
        pete.set_method_description(d);
        --test
        pete.run(package_name => 'UT_PETE', method_name => 'DUMMY_METHOD', parent_run_log_id => pete_core.get_last_run_log_id);
        --assert
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
        --
    end;

end ut_pete;
/
