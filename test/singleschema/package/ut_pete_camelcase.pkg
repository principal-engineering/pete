create or replace package ut_pete_camelcase as

    description constant pete_types.typ_description := 'CamelCase objects';

    procedure before_each;

    procedure log_call(a_value_in in varchar2);

    procedure ccPkgIsCalled1(d varchar2 := 'CamelCase package is called by pete.run');
    procedure ccMethodInNonCCPkgIsCalled11(d varchar2 := 'CamelCase method in Non-CamelCase package is called be pete.run');
    procedure ccMethodInNonCCPkgIsCalled12(d varchar2 := 'CamelCase method in Non-CamelCase package is called be pete.run with method name specified');

    procedure ccPkgIsCalled2(d varchar2 := 'CamelCase package is called by pete.run_test_package');
    procedure ccMethodInNonCCPkgIsCalled21(d varchar2 := 'CamelCase method in Non-CamelCase package is called be pete.run_test_package');
    procedure ccMethodInNonCCPkgIsCalled22(d varchar2 := 'CamelCase method in Non-CamelCase package is called be pete.run_test_package with method name specified');

    procedure after_each;

end;
/
create or replace package body ut_pete_camelcase as

    g_is_recursive_call boolean := false;
    g_call_log          varchar2(30);
    gc_CALLED           varchar2(30) := 'CALLED';
    gc_NOT_CALLED       varchar2(30) := 'NOT CALLED';

    --
    type typ_call_log_tab is table of integer index by varchar2(30);
    gtab_call_log typ_call_log_tab;

    --------------------------------------------------------------------------------
    procedure before_each is
    begin
        g_call_log := gc_NOT_CALLED;
        gtab_call_log.delete;
    end;

    --------------------------------------------------------------------------------
    procedure after_each is
    begin
        begin
            execute immediate 'drop package "ut_OOPeteCCTest"';
        exception
            when others then
                null;
        end;
        begin
            execute immediate 'drop package "ut_PeteCCTest"';
        exception
            when others then
                null;
        end;
        begin
            execute immediate 'drop package UT_OOPETENONCCTEST';
        exception
            when others then
                null;
        end;
        begin
            execute immediate 'drop package UT_PETENONCCTEST';
        exception
            when others then
                null;
        end;
    end;

    --------------------------------------------------------------------------------
    procedure log_call(a_value_in in varchar2) is
    begin
        pete_Logger.trace('log_call: a_value_in ' || a_value_in);
        g_call_log := a_value_in;
        gtab_call_log(a_value_in) := 1;
    end;

    --------------------------------------------------------------------------------
    procedure ccPkgIsCalled1(d varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE "ut_PeteCCTest" AS' || chr(10) ||
        '    PROCEDURE this_should_be_called;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY "ut_PeteCCTest" AS' || chr(10) ||
        '    PROCEDURE this_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_camelcase.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test and assert
        l_result := pete.run(package_name => '"ut_PeteCCTest"', parent_run_log_id => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

    --------------------------------------------------------------------------------
    procedure ccMethodInNonCCPkgIsCalled11(d varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE UT_PETENONCCTEST AS' || chr(10) ||
        '    PROCEDURE "thisShouldBeCalled";' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY UT_PETENONCCTEST AS' || chr(10) ||
        '    PROCEDURE "thisShouldBeCalled" IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_camelcase.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test and assert
        l_result := pete.run(package_name => 'UT_PETENONCCTEST', parent_run_log_id => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

    --------------------------------------------------------------------------------
    procedure ccMethodInNonCCPkgIsCalled12(d varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE UT_PETENONCCTEST AS' || chr(10) ||
        '    PROCEDURE "thisShouldBeCalled";' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY UT_PETENONCCTEST AS' || chr(10) ||
        '    PROCEDURE "thisShouldBeCalled" IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_camelcase.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test and assert
        l_result := pete.run(package_name      => 'UT_PETENONCCTEST',
                             method_name       => 'thisShouldBeCalled',
                             parent_run_log_id => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

    --------------------------------------------------------------------------------
    procedure ccPkgIsCalled2(d varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE "ut_PeteCCTest" AS' || chr(10) ||
        '    PROCEDURE this_should_be_called;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY "ut_PeteCCTest" AS' || chr(10) ||
        '    PROCEDURE this_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_camelcase.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test and assert
        l_result := pete.run_test_package(package_name => '"ut_PeteCCTest"', parent_run_log_id => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

    --------------------------------------------------------------------------------
    procedure ccMethodInNonCCPkgIsCalled21(d varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE UT_PETENONCCTEST AS' || chr(10) ||
        '    PROCEDURE "thisShouldBeCalled";' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY UT_PETENONCCTEST AS' || chr(10) ||
        '    PROCEDURE "thisShouldBeCalled" IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_camelcase.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test and assert
        l_result := pete.run_test_package(package_name => 'UT_PETENONCCTEST', parent_run_log_id => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

    --------------------------------------------------------------------------------
    procedure ccMethodInNonCCPkgIsCalled22(d varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE UT_PETENONCCTEST AS' || chr(10) ||
        '    PROCEDURE "thisShouldBeCalled";' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY UT_PETENONCCTEST AS' || chr(10) ||
        '    PROCEDURE "thisShouldBeCalled" IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_camelcase.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test and assert
        l_result := pete.run_test_package(package_name      => 'UT_PETENONCCTEST',
                                          method_name_like  => 'thisShouldBeCalled',
                                          parent_run_log_id => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

end;
/
