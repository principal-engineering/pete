create or replace package ut_pete_assert as

    Description pete_types.typ_description := 'Pete_assert package tests';

    -- this
    --------------------------------------------------------------------------------  
    procedure this_succeeds_with_true(D varchar2 := 'this should succeed with true value');

    procedure this_throws_with_false(D varchar2 := 'this should throw with false value');

    procedure this_throws_with_null(D varchar2 := 'this should throw with null');

    -- is_null
    -------------------------------------------------------------------------------- 
    procedure is_null_succeeds_with_null(D varchar2 := 'is_null should succeed with null value');

    procedure is_null_throws_with_not_null(D varchar2 := 'is_null should throw with not null value');

    -- is_not_null
    -------------------------------------------------------------------------------- 
    procedure is_nn_throws_with_null(D varchar2 := 'is_not_null should throw with null value');

    procedure is_nn_succeeds_with_nn(D varchar2 := 'is_not_null should succeed with not null value');

    -- pass
    --------------------------------------------------------------------------------    
    procedure pass_succeeds(D varchar2 := 'pass should succeed');

    -- fail
    --------------------------------------------------------------------------------    
    procedure fail_throws(D varchar2 := 'fail should throw');

    -- eq
    --------------------------------------------------------------------------------    
    procedure eq_number_succeeds(D varchar2 := 'eq should succeed for equal numbers');

    procedure eq_varchar2_succeeds(D varchar2 := 'eq should succeed for equal strings');

    procedure eq_date_succeeds(D varchar2 := 'eq should succeed for equal dates');

    procedure eq_boolean_succeeds(D varchar2 := 'eq should succeed for equal booleans');

    procedure eq_same_xmltype_succeeds(D varchar2 := 'eq should succeed for two equal xmls with same order of elements');

    procedure eq_diff_order_xmltype_throws(D varchar2 := 'eq should throw for two equal xmls with different order of elements');

end ut_pete_assert;
/
create or replace package body ut_pete_assert as

    -- this 
    --------------------------------------------------------------------------------  
    procedure this_succeeds_with_true(D varchar2) is
    begin
        --log
        pete.set_method_description(D);
        --test
        pete_assert.this(true);
        --assert
    end;

    procedure this_throws_with_false(D varchar2) is
        l_thrown boolean := false;
    begin
        --log
        pete.set_method_description(D);
        --test
        begin
            pete_assert.this(false, a_plsql_unit_in => $$plsql_unit, a_plsql_line_in => $$plsql_line);
            l_thrown := false;
        exception
            when others then
                l_thrown := true;
        end;
        --assert
        if not l_thrown then
            raise_application_error(-20000, 'PETE_ASSSERT.THIS(FALSE) should throw.');
        end if;
    end;

    procedure this_throws_with_null(D varchar2) is
        l_thrown boolean := false;
    begin
        --log
        pete.set_method_description(D);
        --test
        begin
            pete_assert.this(null, a_plsql_unit_in => $$plsql_unit, a_plsql_line_in => $$plsql_line);
            l_thrown := false;
        exception
            when others then
                l_thrown := true;
        end;
        --assert
        if not l_thrown then
            raise_application_error(-20000, 'PETE_ASSSERT.THIS(NULL) should throw.');
        end if;
    end;

    --is_null
    --------------------------------------------------------------------------------
    procedure is_null_succeeds_with_null(D varchar2) is
        l_number integer := null;
    begin
        --log
        pete.set_method_description(D);
        --test
        pete_assert.is_null(l_number);
        --assert
    end;

    procedure is_null_throws_with_not_null(D varchar2) is
        l_thrown boolean := false;
    begin
        --log
        pete.set_method_description(D);
        --test
        begin
            pete_assert.is_null(1, a_plsql_unit_in => $$plsql_unit, a_plsql_line_in => $$plsql_line);
            l_thrown := false;
        exception
            when others then
                l_thrown := true;
        end;
        --assert
        if not l_thrown then
            raise_application_error(-20000, 'PETE_ASSSERT.IS_NULL(NOT NULL) should throw.');
        end if;
    end;

    --is_not_null
    --------------------------------------------------------------------------------  
    procedure is_nn_throws_with_null(D varchar2) is
        l_number integer := null;
        l_thrown boolean := false;
    begin
        --log
        pete.set_method_description(D);
        --test
        begin
            pete_assert.is_not_null(l_number);
            l_thrown := false;
        exception
            when others then
                l_thrown := true;
        end;
        --assert
        if not l_thrown then
            raise_application_error(-20000, 'PETE_ASSSERT.IS_NOT_NULL(NULL) should throw.');
        end if;
    end;

    procedure is_nn_succeeds_with_nn(D varchar2) is
    begin
        --log
        pete.set_method_description(D);
        --test
        pete_assert.is_not_null(1);
        --assert
    end;

    -- pass
    --------------------------------------------------------------------------------    
    procedure pass_succeeds(D varchar2 := 'pass should succeed') is
    begin
        --log
        pete.set_method_description(D);
        --test
        pete_assert.pass;
        --assert
    end;

    -- fail
    --------------------------------------------------------------------------------    
    procedure fail_throws(D varchar2 := 'fail should throw') is
        l_thrown boolean := false;
    begin
        --log
        pete.set_method_description(D);
        --test
        begin
            pete_assert.fail;
            l_thrown := false;
        exception
            when others then
                l_thrown := true;
        end;
        --assert
        if not l_thrown then
            raise_application_error(-20000, 'PETE_ASSSERT.FAIL should throw.');
        end if;
    end;

    --eq
    --------------------------------------------------------------------------------  
    procedure eq_number_succeeds(D varchar2) is
    begin
        --log
        pete.set_method_description(D);
        --test
        pete_assert.eq(1, 1);
        --assert
    end;

    procedure eq_varchar2_succeeds(D varchar2) is
    begin
        --log
        pete.set_method_description(D);
        --test
        pete_assert.eq('a', 'a');
        --assert
    end;

    procedure eq_date_succeeds(D varchar2) is
        l_D date := sysdate;
    begin
        --log
        pete.set_method_description(D);
        --test
        pete_assert.eq(l_D, l_D);
        --assert
    end;

    procedure eq_boolean_succeeds(D varchar2) is
    begin
        --log
        pete.set_method_description(D);
        --test
        pete_assert.eq(true, true);
        pete_assert.eq(false, false);
        --assert
    end;

    procedure eq_same_xmltype_succeeds(D varchar2) is
        l_xml1 xmltype := xmltype.createxml('<a><b>1</b><c>2</c></a>');
        l_xml2 xmltype := xmltype.createxml('<a><b>1</b><c>2</c></a>');
    begin
        --log
        pete.set_method_description(D);
        --test
        pete_assert.eq(l_xml1, l_xml2);
        --nulls are equal
        l_xml1 := null;
        l_xml2 := null;
        pete_assert.eq(l_xml1, l_xml2);
        --assert
    end;

    procedure eq_diff_order_xmltype_throws(D varchar2) is
        l_xml1   xmltype := xmltype.createxml('<a><b>1</b><c>2</c></a>');
        l_xml2   xmltype := xmltype.createxml('<a><c>2</c><b>1</b></a>');
        l_thrown boolean := false;
    begin
        --log
        pete.set_method_description(D);
        --test
        begin
            pete_assert.eq(l_xml1, l_xml2);
            l_thrown := false;
        exception
            when others then
                l_thrown := true;
        end;
        --assert
        if not l_thrown then
            raise_application_error(-20000, 'PETE_ASSSERT.EQ should throw.');
        end if;
        --test
        begin
            pete_assert.eq(null, l_xml2);
            l_thrown := false;
        exception
            when others then
                l_thrown := true;
        end;
        --assert
        if not l_thrown then
            raise_application_error(-20000, 'PETE_ASSSERT.EQ should throw.');
        end if;
        --test
        begin
            pete_assert.eq(l_xml1, null);
            l_thrown := false;
        exception
            when others then
                l_thrown := true;
        end;
        --assert
        if not l_thrown then
            raise_application_error(-20000, 'PETE_ASSSERT.EQ should throw.');
        end if;
    end;

end ut_pete_assert;
/
