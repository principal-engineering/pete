CREATE OR REPLACE PACKAGE ut_pete_utils AS

    description pete_core.typ_description := 'Pete Utils';

    PROCEDURE get_enq_schema_from_schema(d varchar2 := 'get enquoted schema name from schema works');
    PROCEDURE get_enq_schema_from_package(d varchar2 := 'get enquoted schema name from package works');
    PROCEDURE get_enq_package_name(d varchar2 := 'get enquoted package');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_pete_utils AS

    --------------------------------------------------------------------------------
    PROCEDURE get_enq_schema_from_schema(d varchar2) IS
    BEGIN
        --log
        pete.set_method_description(d);
        --assert
        --null = user
        pete_assert.eq(
            a_expected_in => '"' || USER || '"',
            a_actual_in => pete_utils.get_enquoted_schema_name(a_schema_name_in => NULL)
        );
        --tEst - changed to uppercase and enquoted
        pete_assert.eq(
            a_expected_in => '"TEST"',
            a_actual_in => pete_utils.get_enquoted_schema_name(a_schema_name_in => 'tEst')
        );
        --enquoted string - no change
        pete_assert.eq(
            a_expected_in => '"tEst"',
            a_actual_in => pete_utils.get_enquoted_schema_name(a_schema_name_in => '"tEst"')
        );
    END;

    --------------------------------------------------------------------------------
    PROCEDURE get_enq_schema_from_package(d varchar2) IS
    BEGIN
        --log
        pete.set_method_description(d);
        --assert
        --null = null
        pete_assert.eq(
            a_expected_in => NULL,
            a_actual_in => pete_utils.get_enquoted_schema_name(a_package_name_in => NULL)
        );
        --package_name -> user
        pete_assert.eq(
            a_expected_in => '"' || USER || '"',
            a_actual_in => pete_utils.get_enquoted_schema_name(a_package_name_in => 'tEst')
        );
        --"package_name" -> user
        pete_assert.eq(
            a_expected_in => '"' || USER || '"',
            a_actual_in => pete_utils.get_enquoted_schema_name(a_package_name_in => '"tEst"')
        );
        --schema.package_name -> "SCHEMA"
        pete_assert.eq(
            a_expected_in => '"SCHEMA"',
            a_actual_in => pete_utils.get_enquoted_schema_name(a_package_name_in => 'scHema.tEst')
        );
        --schema."package_name" -> "SCHEMA"
        pete_assert.eq(
            a_expected_in => '"SCHEMA"',
            a_actual_in => pete_utils.get_enquoted_schema_name(a_package_name_in => 'scHema."tEst"')
        );
        --"scHema".package_name -> "scHema"
        pete_assert.eq(
            a_expected_in => '"scHema"',
            a_actual_in => pete_utils.get_enquoted_schema_name(a_package_name_in => '"scHema".tEst')
        );
        --"scHema"."package_name" -> "scHema"
        pete_assert.eq(
            a_expected_in => '"scHema"',
            a_actual_in => pete_utils.get_enquoted_schema_name(a_package_name_in => '"scHema"."tEst"')
        );
    END;

    --------------------------------------------------------------------------------
    PROCEDURE get_enq_package_name(d varchar2) IS
    BEGIN
        --log
        pete.set_method_description(d);
        --assert
        pete_assert.eq(
            a_expected_in => NULL,
            a_actual_in => pete_utils.get_enquoted_package_name(a_package_name_in => NULL)
        );
        --schema.package_name -> "PACKAGE_NAME"
        pete_assert.eq(
            a_expected_in => '"TEST"',
            a_actual_in => pete_utils.get_enquoted_package_name(a_package_name_in => 'scHema.tEst')
        );
        --schema."packageName" -> "packageName"
        pete_assert.eq(
            a_expected_in => '"tEst"',
            a_actual_in => pete_utils.get_enquoted_package_name(a_package_name_in => 'scHema."tEst"')
        );
        --"scHema".package_name -> "PACKAGE_NAME"
        pete_assert.eq(
            a_expected_in => '"TEST"',
            a_actual_in => pete_utils.get_enquoted_package_name(a_package_name_in => '"scHema".tEst')
        );
        --"scHema"."packageName" -> "packageName"
        pete_assert.eq(
            a_expected_in => '"tEst"',
            a_actual_in => pete_utils.get_enquoted_package_name(a_package_name_in => '"scHema"."tEst"')
        );
    END;


END;
/
