create or replace package ut_pete_convention_runner as

    description pete_types.typ_description := 'Pete Convention Runner';

    procedure before_each;

    procedure log_call(a_value_in in varchar2);

    procedure run_proc_without_args(d in varchar2 default 'should run procedure without any arguments');

    procedure run_proc_with_optional_args(d in varchar2 default 'should run procedure with optional arguments');

    procedure not_run_proc_w_mndtry_args(d in varchar2 default 'should not run procedure with mandatory arguments');

    procedure not_run_function(d in varchar2 default 'should not run function');

    procedure pkg_only(d in varchar2 default 'Only package with UT_OO% prefix should be run by run_suite');

    procedure suite_method_only(d in varchar2 default 'Run suite - if there are any methods with OO prefix, run all hooks and these methods only');

    procedure package_method_only(d in varchar2 default 'Run package - if there are any methods with OO prefix, run all hooks and these methods only');

    procedure suite_method_skip(d in varchar2 default 'Methods with XX prefix should by skipped when running suite');

    procedure package_method_skip(d in varchar2 default 'Methods with XX prefix should by skipped when running package');

    procedure skip_all_if_skip_on_hook_fail(d in varchar2 default 'Skip all methods in package if "before all" hook fails and "skip test if before hook fails" option is set');

    procedure skip_next_if_skip_on_hook_fail(d in varchar2 default 'Skip next method in package if "before each" hook fails and "skip test if before hook fails" option is set');

    procedure cntna_if_not_skip_on_hook_fail(d in varchar2 default 'Continue with next method if "before each" hook fails and "skip test if before hook fails" option is not set');

    procedure cntnn_if_not_skip_on_hook_fail(d in varchar2 default 'Continue with next method if "before each" hook fails and "skip test if before hook fails" option is not set');

    procedure unknown_package(d in varchar2 default 'Explicitly called package which is not found should throw');

    procedure caseInSensitiVe(d in varchar2 default 'Calls should work case insensitive');

    procedure unknown_method(d in varchar2 default 'Explicitly called method which is not found should fail');

    procedure after_all_is_always_called(d in varchar2 := 'After all is always called');

    procedure after_each;

end ut_pete_convention_runner;
/
create or replace package body ut_pete_convention_runner as

    g_is_recursive_call boolean := false;
    g_call_log          varchar2(30);
    gc_CALLED           varchar2(30) := 'CALLED';
    gc_NOT_CALLED       varchar2(30) := 'NOT CALLED';

    --
    type typ_call_log_tab is table of integer index by varchar2(30);
    gtab_call_log typ_call_log_tab;

    --------------------------------------------------------------------------------  
    procedure before_each is
    begin
        g_call_log := gc_NOT_CALLED;
        gtab_call_log.delete;
    end;

    --------------------------------------------------------------------------------  
    procedure after_each is
    begin
        begin
            execute immediate 'drop package ut_oopete_test_cnv_runner';
        exception
            when others then
                null;
        end;
        begin
            execute immediate 'drop package ut_pete_test_cnv_runner';
        exception
            when others then
                null;
        end;
    end;

    --------------------------------------------------------------------------------  
    procedure log_call(a_value_in in varchar2) is
    begin
        pete_Logger.trace('log_call: a_value_in ' || a_value_in);
        g_call_log := a_value_in;
        gtab_call_log(a_value_in) := 1;
    end;

    --------------------------------------------------------------------------------
    function has_been_called(a_value_in in varchar2) return boolean is
        l_result boolean;
    begin
        pete_Logger.trace('has_been_called : a_value_in ' || a_value_in);
        l_result := gtab_call_log.exists(a_value_in);
        pete_logger.trace('returns ' || case l_result when true then 'TRUE' when false then 'FALSE' else null end);
        return l_result;
    end;

    --------------------------------------------------------------------------------
    procedure run_proc_without_args(d in varchar2 default 'should run procedure without any arguments') is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test and assert
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

    --------------------------------------------------------------------------------
    procedure run_proc_with_optional_args(d in varchar2 default 'should run procedure with optional arguments') is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called(a in integer default 0, b in integer default 1);' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called(a in integer default 0, b in integer default 1) IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

    --------------------------------------------------------------------------------
    procedure not_run_proc_w_mndtry_args(d in varchar2 default 'should not run procedure with mandatory arguments') is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_not_be_called(a in integer);' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_not_be_called(a in integer) IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should not be called'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
    end;

    --------------------------------------------------------------------------------
    procedure not_run_function(d in varchar2 default 'should not run function') is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    FUNCTION this_should_not_be_called return integer;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    FUNCTION this_should_not_be_called return integer IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should not be called'');' || chr(10) ||
        '        pete_assert.fail;' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
    
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
    end;

    --------------------------------------------------------------------------------
    procedure pkg_only(d in varchar2 default 'Only package with UT_OO% prefix should be run by run_suite') is
        -- NoFormat Start
        l_package_spec1 VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_oopete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called;' || chr(10) ||
        'END;';
        
        l_package_body1 VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_oopete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        
        l_package_spec2 VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_not_be_called;' || chr(10) ||
        'END;';
        
        l_package_body2 VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_not_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should not be called'');' || chr(10) ||
        '        pete_assert.fail;' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec1;
        execute immediate l_package_body1;
        execute immediate l_package_spec2;
        execute immediate l_package_body2;
        --test
        if not g_is_recursive_call then
            g_is_recursive_call := true;
            l_result            := pete_convention_runner.run_suite(a_suite_name_in        => user,
                                                                    a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        
            --assert
            pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
            pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
            --
            g_is_recursive_call := false;
        end if;
        --
    end;

    --------------------------------------------------------------------------------
    procedure suite_method_only(d in varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE oothis_should_be_called;' || chr(10) ||
        '    PROCEDURE this_should_not_be_called;' || chr(10) || 
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE oothis_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE this_should_not_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should not be called'');' || chr(10) ||
        '        pete_assert.fail;' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test
        if not g_is_recursive_call then
            g_is_recursive_call := true;
            l_result            := pete_convention_runner.run_suite(a_suite_name_in        => user,
                                                                    a_parent_run_log_id_in => pete_core.get_last_run_log_id);
            --assert
            pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
            pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
            --
            g_is_recursive_call := false;
        end if;
        --
    end;

    --------------------------------------------------------------------------------
    procedure package_method_only(d in varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE oothis_should_be_called;' || chr(10) ||
        '    PROCEDURE this_should_not_be_called;' || chr(10) || 
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE oothis_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE this_should_not_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should not be called'');' || chr(10) ||
        '        pete_assert.fail;' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test
        if not g_is_recursive_call then
            g_is_recursive_call := true;
            l_result            := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                                      a_parent_run_log_id_in => pete_core.get_last_run_log_id);
            --assert
            pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
            pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
            --
            g_is_recursive_call := false;
        end if;
        --
    end;

    --------------------------------------------------------------------------------
    procedure suite_method_skip(d in varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_oopete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called;' || chr(10) ||
        '    PROCEDURE xxthis_should_not_be_called;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_oopete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE xxthis_should_not_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should not be called as it is marked as skipped'');' || chr(10) ||
        '        pete_assert.fail;' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test
        if not g_is_recursive_call then
            g_is_recursive_call := true;
            l_result            := pete_convention_runner.run_suite(a_suite_name_in        => user,
                                                                    a_parent_run_log_id_in => pete_core.get_last_run_log_id);
            --assert
            pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
            pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
            --
            g_is_recursive_call := false;
        end if;
        --
    end;

    --------------------------------------------------------------------------------
    procedure package_method_skip(d in varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called;' || chr(10) ||
        '    PROCEDURE xxthis_should_not_be_called;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE this_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE xxthis_should_not_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should not be called as it is marked as skipped'');' || chr(10) ||
        '        pete_assert.fail;' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test
        if not g_is_recursive_call then
            g_is_recursive_call := true;
            l_result            := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                                      a_parent_run_log_id_in => pete_core.get_last_run_log_id);
            --assert
            pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
            pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
            --
            g_is_recursive_call := false;
        end if;
        --
    end;

    --------------------------------------------------------------------------------
    procedure skip_all_if_skip_on_hook_fail(d in varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE before_all;' || chr(10) ||
        '    PROCEDURE this_should_not_be_called;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE before_all IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        raise_application_error(-20000, ''Expected exception'');' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE this_should_not_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should not be called as before_all has failed'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '        pete_assert.fail;' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --set config
        pete_config.set_skip_if_before_hook_fails(value => true);
        --run test
        pete_assert.eq(a_expected_in => gc_NOT_CALLED, a_actual_in => g_call_log);
    
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.eq(a_expected_in => pete_core.g_FAILURE, a_actual_in => l_result, a_comment_in => 'Expecting result to be FAILURE');
        pete_assert.eq(a_expected_in => gc_NOT_CALLED, a_actual_in => g_call_log);
    end;

    --------------------------------------------------------------------------------
    procedure skip_next_if_skip_on_hook_fail(d in varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE before_each;' || chr(10) ||
        '    PROCEDURE this_should_not_be_called;' || chr(10) ||
        '    PROCEDURE this_should_be_called;' || chr(10) ||
        '    PROCEDURE after_each;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    g_do_fail boolean := true;' || chr(10) ||
        '    PROCEDURE before_each IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        IF g_do_fail then ' || chr(10) ||
        '            raise_application_error(-20000, ''Expected exception'');' || chr(10) ||
        '        END IF;' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE this_should_not_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should not be called as before_each has failed'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED1'');' || chr(10) ||
        '        pete_assert.fail;' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE this_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called as before_each has succeeded'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED2'');' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE after_each IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        g_do_fail := false;' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --set config
        pete_config.set_skip_if_before_hook_fails(value => true);
        --run test
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.eq(a_expected_in => pete_core.g_FAILURE, a_actual_in => l_result, a_comment_in => 'Expecting result to be FAILURE');
        pete_assert.this(a_value_in   => not has_been_called('CALLED1'),
                         a_comment_in => 'Method should not be called after before_each failed');
        pete_assert.this(a_value_in => has_been_called('CALLED2'), a_comment_in => 'Method should be called after before_each succeeds');
    end;

    --------------------------------------------------------------------------------
    procedure cntna_if_not_skip_on_hook_fail(d in varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE before_all;' || chr(10) ||
        '    PROCEDURE this_should_be_called;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE before_all IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        raise_application_error(-20000, ''Expected exception'');' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE this_should_be_called IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called even after before_all has failed because pete_config overrides it'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --set config
        pete_config.set_skip_if_before_hook_fails(value => false);
        --run test
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.eq(a_expected_in => pete_core.g_FAILURE, a_actual_in => l_result, a_comment_in => 'Expecting result to be FAILURE');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

    --------------------------------------------------------------------------------
    procedure cntnn_if_not_skip_on_hook_fail(d in varchar2) is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE before_each;' || chr(10) ||
        '    PROCEDURE this_should_be_called1;' || chr(10) ||
        '    PROCEDURE this_should_be_called2;' || chr(10) ||
        '    PROCEDURE after_each;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    g_do_fail boolean := true;' || chr(10) ||
        '    PROCEDURE before_each IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        IF g_do_fail then ' || chr(10) ||
        '            raise_application_error(-20000, ''Expected exception'');' || chr(10) ||
        '        END IF;' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE this_should_be_called1 IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called even after before_each has failed because pete_config overrides it'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED1'');' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE this_should_be_called2 IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called as before_each has succeeded'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED2'');' || chr(10) ||
        '    END;' || chr(10) ||
        '' || chr(10) ||
        '    PROCEDURE after_each IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        g_do_fail := false;' || chr(10) ||
        '    END;' || chr(10) ||
        'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --set config
        pete_config.set_skip_if_before_hook_fails(value => false);
        --run test
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.eq(a_expected_in => pete_core.g_FAILURE, a_actual_in => l_result, a_comment_in => 'Expecting result to be FAILURE');
        pete_assert.this(a_value_in   => has_been_called('CALLED1'),
                         a_comment_in => 'Method should be called event after before_each failed');
        pete_assert.this(a_value_in => has_been_called('CALLED2'), a_comment_in => 'Method should be called after before_each succeeds');
    end;

    --------------------------------------------------------------------------------
    procedure unknown_package(d in varchar2 default 'Explicitly called package which is not found should throw') is
        l_result pete_types.typ_execution_result;
    begin
        pete.set_method_description(d);
        --prepare
    
        --test
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'Non_exIsting_package',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => not l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be FAILURE');
    end unknown_package;

    --------------------------------------------------------------------------------
    procedure caseInSensitiVe(d in varchar2 default 'Calls should work case insensitive') is
        l_package_spec varchar2(32767) := 'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) || '    PROCEDURE method;' ||
                                          chr(10) || 'END;';
    
        l_package_body varchar2(32767) := 'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
                                          '    PROCEDURE method IS' || chr(10) || '    BEGIN' || chr(10) ||
                                          '        pete.set_method_description(''This method should be called even if case is mismatched'');' ||
                                          chr(10) || '        ut_pete_convention_runner.log_call(''CALLED1'');' || chr(10) || '    END;' ||
                                          chr(10) || 'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --run test
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_Runner',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in   => has_been_called('CALLED1') and l_result = pete_core.g_SUCCESS,
                         a_comment_in => 'Method should be called even if case is mismatched');
    end;

    --------------------------------------------------------------------------------
    procedure unknown_method(d in varchar2 default 'Explicitly called method which is not found should fail') is
        l_package_spec varchar2(32767) := 'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) || '    PROCEDURE method;' ||
                                          chr(10) || 'END;';
    
        l_package_body varchar2(32767) := 'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
                                          '    PROCEDURE method IS' || chr(10) || '    BEGIN' || chr(10) ||
                                          '        pete.set_method_description(''This method should be called even if case is mismatched'');' ||
                                          chr(10) || '        ut_pete_convention_runner.log_call(''CALLED1'');' || chr(10) || '    END;' ||
                                          chr(10) || 'END;'; --
        -- NoFormat End
        l_result pete_types.typ_execution_result;
        --        l_exception boolean;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --run test
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_Runner',
                                                       a_method_name_like_in  => 'non_existing_method',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => not l_result = pete_core.g_SUCCESS, a_comment_in => 'Non existing method call should fail');
    end;

    --------------------------------------------------------------------------------
    procedure after_all_is_always_called(d in varchar2 := 'After all is always called') is
        -- NoFormat Start
        l_package_spec VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE after_all;' || chr(10) ||
        'END;';
        
        l_package_body VARCHAR2(32767) :=
        'CREATE OR REPLACE PACKAGE BODY ut_pete_test_cnv_runner AS' || chr(10) ||
        '    PROCEDURE after_all IS' || chr(10) ||
        '    BEGIN' || chr(10) ||
        '        pete.set_method_description(''This method should be called'');' || chr(10) ||
        '        ut_pete_convention_runner.log_call(''CALLED'');' || chr(10) ||
        '    END;' || chr(10) ||
        'END;';
        -- NoFormat End
        l_result pete_types.typ_execution_result;
    begin
        --log
        pete.set_method_description(d);
        --prepare
        execute immediate l_package_spec;
        execute immediate l_package_body;
        --test and assert
        l_result := pete_convention_runner.run_package(a_package_name_in      => 'UT_PETE_TEST_CNV_RUNNER',
                                                       a_parent_run_log_id_in => pete_core.get_last_run_log_id);
        --assert
        pete_assert.this(a_value_in => l_result = pete_core.g_SUCCESS, a_comment_in => 'Expecting result to be SUCCESS');
        pete_assert.eq(a_expected_in => gc_CALLED, a_actual_in => g_call_log);
    end;

end ut_pete_convention_runner;
/
